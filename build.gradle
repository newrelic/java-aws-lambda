buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {
    implementation 'software.amazon.awssdk:s3:2.31.43'
    implementation 'software.amazon.awssdk:s3-event-notifications:2.31.43'

    implementation 'com.amazonaws:aws-lambda-java-core:1.2.3'
    implementation 'com.amazonaws:aws-lambda-java-events:3.15.0'

    implementation('io.opentracing:opentracing-api:0.33.0')
    implementation('io.opentracing:opentracing-util:0.33.0')
    implementation('io.opentracing:opentracing-noop:0.33.0')

    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'io.opentracing:opentracing-mock:0.33.0'
}

// -Prelease=true will render a non-snapshot version
// All other values (including unset) will render a snapshot version.
def release = findProperty("release")
version = project.findProperty("version")

if (!release) {
    version += "-SNAPSHOT"
}

jar {
    from(projectDir) { include "README.md" }

    manifest {
        attributes 'Implementation-Title': 'AWS Lambda OpenTracing Java SDK',
                'Implementation-Version': project.version,
                'Created-By': 'New Relic, Inc',
                'Built-Date': new Date(),
                'Specification-Version': project.version,
                'Build-Id': System.getProperty('BUILD_ID') || "None"
    }
}

publishing {
    repositories {
        maven {
            def releasesRepoUrl = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
            def snapshotsRepoUrl = uri("https://oss.sonatype.org/content/repositories/snapshots/")
            if (version.toString().endsWith("SNAPSHOT")) {
                url = snapshotsRepoUrl
            } else {
                url = releasesRepoUrl
            }
            credentials {
                username = System.getenv("SONATYPE_USERNAME")
                password = System.getenv("SONATYPE_PASSWORD")
            }
        }
    }
    publications {
        register("mavenJava", MavenPublication.class) {
            from(components["java"])
        }
        // customize all publications here
        withType(MavenPublication.class) {
            pom {
                name.set(project.name)
                description.set("SDK that provides open tracing instrumentation for AWS Lambda")
                url.set("https://github.com/newrelic/java-aws-lambda")
                licenses {
                    license {
                        name.set("The Apache License, Version 2.0")
                        url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                        distribution.set("repo")
                    }
                }
                developers {
                    developer {
                        id.set("newrelic")
                        name.set("New Relic")
                        email.set("opensource@newrelic.com")
                    }
                }
                scm {
                    url.set("git@github.com:newrelic/java-aws-lambda.git")
                    connection.set("scm:git@github.com:newrelic/java-aws-lambda.git")
                }
            }
        }
    }
}

signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    setRequired({ gradle.taskGraph.hasTask("uploadArchives") })
    sign publishing.publications["mavenJava"]
}